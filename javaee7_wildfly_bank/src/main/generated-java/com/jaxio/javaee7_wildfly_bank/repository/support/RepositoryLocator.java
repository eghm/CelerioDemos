/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-backend:src/main/java/repository/support/RepositoryLocator.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.repository.support;

import static com.google.common.collect.Maps.newHashMap;

import java.io.Serializable;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;

import com.jaxio.javaee7_wildfly_bank.repository.AccountRepository;
import com.jaxio.javaee7_wildfly_bank.repository.AddressRepository;
import com.jaxio.javaee7_wildfly_bank.repository.CurrencyRepository;
import com.jaxio.javaee7_wildfly_bank.repository.CustomerRepository;
import com.jaxio.javaee7_wildfly_bank.repository.RoleRepository;
import com.jaxio.javaee7_wildfly_bank.repository.SavedSearchRepository;
import com.jaxio.javaee7_wildfly_bank.repository.TransactionRepository;
import com.jaxio.javaee7_wildfly_bank.repository.UserRepository;
import com.jaxio.jpa.querybyexample.GenericRepository;
import com.jaxio.jpa.querybyexample.Identifiable;

@Named
@ApplicationScoped
public class RepositoryLocator {
    private Map<String, GenericRepository<?, ?>> repositories = newHashMap();

    @Inject
    private AccountRepository accountRepository;

    @Inject
    private AddressRepository addressRepository;

    @Inject
    private CurrencyRepository currencyRepository;

    @Inject
    private CustomerRepository customerRepository;

    @Inject
    private RoleRepository roleRepository;

    @Inject
    private SavedSearchRepository savedSearchRepository;

    @Inject
    private TransactionRepository transactionRepository;

    @Inject
    private UserRepository userRepository;

    @PostConstruct
    public void init() {
        repositories.put(accountRepository.getType().getSimpleName(), accountRepository);
        repositories.put(addressRepository.getType().getSimpleName(), addressRepository);
        repositories.put(currencyRepository.getType().getSimpleName(), currencyRepository);
        repositories.put(customerRepository.getType().getSimpleName(), customerRepository);
        repositories.put(roleRepository.getType().getSimpleName(), roleRepository);
        repositories.put(savedSearchRepository.getType().getSimpleName(), savedSearchRepository);
        repositories.put(transactionRepository.getType().getSimpleName(), transactionRepository);
        repositories.put(userRepository.getType().getSimpleName(), userRepository);
    }

    @SuppressWarnings("unchecked")
    public <PK extends Serializable> GenericRepository<Identifiable<PK>, PK> getRepository(Identifiable<PK> entity) {
        // note: do not use entity.getClass() as it could be an hibernate proxy...
        return (GenericRepository<Identifiable<PK>, PK>) repositories.get(entity.entityClassName());
    }
}
