/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-backend:src/main/java/search/MassIndexerService.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.search;

import static org.hibernate.search.jpa.Search.getFullTextEntityManager;

import java.util.Arrays;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.apache.commons.lang.time.StopWatch;

import com.jaxio.javaee7_wildfly_bank.domain.Address;
import com.jaxio.javaee7_wildfly_bank.domain.Role;
import com.jaxio.javaee7_wildfly_bank.domain.User;
import com.jaxio.javaee7_wildfly_bank.util.IntConfig;

@Singleton
@Named
@Startup
public class MassIndexerService {
    @Inject
    private Logger log;

    protected static Class<?>[] CLASSES_TO_BE_INDEXED = { //
    Address.class //
            , Role.class //
            , User.class //
    };

    @PersistenceContext
    // inject would not work as we use it outside of a request scoped.
    protected EntityManager entityManager;

    @Inject
    @IntConfig(name = "massIndexer.nbThreadsToLoadObjects", defaultValue = 1)
    protected int threadsToLoadObjects;

    @Inject
    @IntConfig(name = "massIndexer.batchSizeToLoadObjects", defaultValue = 10)
    protected int batchSizeToLoadObjects;

    @Inject
    @IntConfig(name = "massIndexer.nbThreadsForSubsequentFetching", defaultValue = 1)
    protected int threadsForSubsequentFetching;

    @PostConstruct
    public void createIndex() {
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        try {
            for (Class<?> classToBeIndexed : CLASSES_TO_BE_INDEXED) {
                indexClass(classToBeIndexed);
            }
        } finally {
            stopWatch.stop();
            log.info("Indexed " + Arrays.toString(CLASSES_TO_BE_INDEXED) + " in " + stopWatch.toString());
        }
    }

    private void indexClass(Class<?> classToBeIndexed) {
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        try {
            getFullTextEntityManager(entityManager) //
                    .createIndexer(classToBeIndexed) //
                    //                    .batchSizeToLoadObjects(batchSizeToLoadObjects) //
                    //                    .threadsToLoadObjects(threadsToLoadObjects) //
                    .startAndWait();
        } catch (InterruptedException e) {
            log.warning("Interrupted while indexing " + classToBeIndexed.getSimpleName());
            Thread.currentThread().interrupt();
        } finally {
            stopWatch.stop();
            log.info("Indexed " + classToBeIndexed.getSimpleName() + " in " + stopWatch.toString());
        }
    }
}
