/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-backend:src/main/java/service/EnvironmentService.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.service;

import static com.jaxio.javaee7_wildfly_bank.service.EnvironmentService.Environment.Development;
import static com.jaxio.javaee7_wildfly_bank.service.EnvironmentService.Environment.Integration;
import static com.jaxio.javaee7_wildfly_bank.service.EnvironmentService.Environment.Production;
import static com.jaxio.javaee7_wildfly_bank.service.EnvironmentService.Environment.toEnvironment;
import static org.apache.commons.lang.StringUtils.trimToEmpty;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;

import org.apache.deltaspike.core.api.config.ConfigProperty;

@ApplicationScoped
@Named
public class EnvironmentService {

    @Inject
    @ConfigProperty(name = "env_name", defaultValue = "development")
    private String environmentName;

    public enum Environment {
        Development, Integration, Production;
        boolean is(String value) {
            return name().equalsIgnoreCase(trimToEmpty(value));
        }

        public static Environment toEnvironment(String value) {
            for (Environment environment : values()) {
                if (environment.is(value)) {
                    return environment;
                }
            }
            return Development;
        }
    }

    public boolean isDevelopment() {
        return Development.is(environmentName);
    }

    public boolean isIntegration() {
        return Integration.is(environmentName);
    }

    public boolean isProduction() {
        return Production.is(environmentName);
    }

    public Environment getEnvironment() {
        return toEnvironment(environmentName);
    }
}