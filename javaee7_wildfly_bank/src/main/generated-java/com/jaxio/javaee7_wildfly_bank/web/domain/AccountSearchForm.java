/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.faces.view.ViewScoped;
import javax.inject.Named;

import com.jaxio.javaee7_wildfly_bank.domain.Account;
import com.jaxio.javaee7_wildfly_bank.domain.Account_;
import com.jaxio.javaee7_wildfly_bank.domain.Currency;
import com.jaxio.javaee7_wildfly_bank.domain.Customer;
import com.jaxio.javaee7_wildfly_bank.web.domain.support.GenericSearchForm;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Account}.
 * It exposes a {@link Account} instance so it can be used in search by-example-query.
 */
@ViewScoped
@Named
public class AccountSearchForm extends GenericSearchForm<Account, Integer, AccountSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Account account = new Account();
    protected PropertySelector<Account, String> accountNumberSelector = newPropertySelector(Account_.accountNumber);
    protected PropertySelector<Account, String> nameSelector = newPropertySelector(Account_.name);
    protected PropertySelector<Account, Currency> currencySelector = newPropertySelector(Account_.currency);
    protected PropertySelector<Account, Customer> customerSelector = newPropertySelector(Account_.customer);

    public Account getAccount() {
        return account;
    }

    @Override
    protected Account getEntity() {
        return getAccount();
    }

    @Override
    public AccountSearchForm newInstance() {
        return new AccountSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.fetch(Account_.customer);
        sp.property(accountNumberSelector, nameSelector);
        sp.property(currencySelector, customerSelector);
        return sp;
    }

    @Override
    public void resetWithOther(AccountSearchForm other) {
        this.account = other.getAccount();
        this.accountNumberSelector = other.getAccountNumberSelector();
        this.nameSelector = other.getNameSelector();
        this.currencySelector = other.getCurrencySelector();
        this.customerSelector = other.getCustomerSelector();
    }

    // Property selectors
    public PropertySelector<Account, String> getAccountNumberSelector() {
        return accountNumberSelector;
    }

    public PropertySelector<Account, String> getNameSelector() {
        return nameSelector;
    }

    // Relation selectors
    public PropertySelector<Account, Currency> getCurrencySelector() {
        return currencySelector;
    }

    public PropertySelector<Account, Customer> getCustomerSelector() {
        return customerSelector;
    }
}
