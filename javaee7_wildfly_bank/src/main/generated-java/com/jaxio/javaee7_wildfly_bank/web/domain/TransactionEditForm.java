/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.domain;

import javax.faces.context.FacesContext;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.jaxio.javaee7_wildfly_bank.domain.Account;
import com.jaxio.javaee7_wildfly_bank.domain.Currency;
import com.jaxio.javaee7_wildfly_bank.domain.Transaction;
import com.jaxio.javaee7_wildfly_bank.repository.TransactionRepository;
import com.jaxio.javaee7_wildfly_bank.web.domain.support.GenericEditForm;
import com.jaxio.javaee7_wildfly_bank.web.domain.support.GenericToOneAssociation;

/**
 * View Helper/Controller to edit {@link Transaction}.
 */
@ViewScoped
@Named
public class TransactionEditForm extends GenericEditForm<Transaction, Integer> {
    private static final long serialVersionUID = 1L;
    @Inject
    protected transient TransactionController transactionController;
    @Inject
    protected transient CurrencyController currencyController;
    protected transient GenericToOneAssociation<Currency, Integer> currency;
    @Inject
    protected transient AccountController accountController;
    protected transient GenericToOneAssociation<Account, Integer> account;

    public TransactionEditForm() {
        // mandatory no-args constructor to make this bean proxyable
    }

    @Inject
    public TransactionEditForm(TransactionRepository transactionRepository, TransactionGraphLoader transactionGraphLoader) {
        super(transactionRepository, transactionGraphLoader);
    }

    /**
     * pre-populate x-to-one association support (used during creation only)
     */
    @Override
    protected void initNewEntity(Transaction newEntity) {
        String accountId = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("accountId");
        if (accountId != null) {
            newEntity.setAccount(accountController.getRepository().getById(accountController.convertToPrimaryKey(accountId)));
        }
    }

    /**
     * The entity to edit/view.
     */
    public Transaction getTransaction() {
        return getEntity();
    }

    @Override
    protected void onInit() {
        setupCurrencyActions();
        setupAccountActions();
    }

    public String print() {
        return transactionController.print(getTransaction());
    }

    void setupCurrencyActions() {
        currency = new GenericToOneAssociation<Currency, Integer>("transaction_currency", currencyController) {
            @Override
            protected Currency get() {
                return getTransaction().getCurrency();
            }

            @Override
            protected void set(Currency currency) {
                getTransaction().setCurrency(currency);
            }

            @NotNull
            @Override
            public Currency getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Currency, Integer> getCurrency() {
        return currency;
    }

    void setupAccountActions() {
        account = new GenericToOneAssociation<Account, Integer>("transaction_account", accountController) {
            @Override
            protected Account get() {
                return getTransaction().getAccount();
            }

            @Override
            protected void set(Account account) {
                getTransaction().setAccount(account);
            }

            @NotNull
            @Override
            public Account getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Account, Integer> getAccount() {
        return account;
    }
}