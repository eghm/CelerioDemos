/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;
import static com.jaxio.jpa.querybyexample.Range.newRange;

import java.math.BigDecimal;
import java.util.Date;

import javax.faces.view.ViewScoped;
import javax.inject.Named;

import com.jaxio.javaee7_wildfly_bank.domain.Account;
import com.jaxio.javaee7_wildfly_bank.domain.Currency;
import com.jaxio.javaee7_wildfly_bank.domain.Transaction;
import com.jaxio.javaee7_wildfly_bank.domain.Transaction_;
import com.jaxio.javaee7_wildfly_bank.web.domain.support.GenericSearchForm;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.Range;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Transaction}.
 * It exposes a {@link Transaction} instance so it can be used in search by-example-query.
 */
@ViewScoped
@Named
public class TransactionSearchForm extends GenericSearchForm<Transaction, Integer, TransactionSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Transaction transaction = new Transaction();
    protected Range<Transaction, BigDecimal> amountRange = newRange(Transaction_.amount);
    protected Range<Transaction, Date> transactionDateRange = newRange(Transaction_.transactionDate);
    protected Range<Transaction, Date> valueDateRange = newRange(Transaction_.valueDate);
    protected PropertySelector<Transaction, BigDecimal> amountSelector = newPropertySelector(Transaction_.amount);
    protected PropertySelector<Transaction, String> descriptionSelector = newPropertySelector(Transaction_.description);
    protected PropertySelector<Transaction, Currency> currencySelector = newPropertySelector(Transaction_.currency);
    protected PropertySelector<Transaction, Account> accountSelector = newPropertySelector(Transaction_.account);

    public Transaction getTransaction() {
        return transaction;
    }

    @Override
    protected Transaction getEntity() {
        return getTransaction();
    }

    @Override
    public TransactionSearchForm newInstance() {
        return new TransactionSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.fetch(Transaction_.account);
        sp.range(amountRange, transactionDateRange, valueDateRange);
        sp.property(amountSelector, descriptionSelector);
        sp.property(currencySelector, accountSelector);
        return sp;
    }

    @Override
    public void resetWithOther(TransactionSearchForm other) {
        this.transaction = other.getTransaction();
        this.amountRange = other.getAmountRange();
        this.transactionDateRange = other.getTransactionDateRange();
        this.valueDateRange = other.getValueDateRange();
        this.amountSelector = other.getAmountSelector();
        this.descriptionSelector = other.getDescriptionSelector();
        this.currencySelector = other.getCurrencySelector();
        this.accountSelector = other.getAccountSelector();
    }

    // Ranges
    public Range<Transaction, BigDecimal> getAmountRange() {
        return amountRange;
    }

    public Range<Transaction, Date> getTransactionDateRange() {
        return transactionDateRange;
    }

    public Range<Transaction, Date> getValueDateRange() {
        return valueDateRange;
    }

    // Property selectors
    public PropertySelector<Transaction, BigDecimal> getAmountSelector() {
        return amountSelector;
    }

    public PropertySelector<Transaction, String> getDescriptionSelector() {
        return descriptionSelector;
    }

    // Relation selectors
    public PropertySelector<Transaction, Currency> getCurrencySelector() {
        return currencySelector;
    }

    public PropertySelector<Transaction, Account> getAccountSelector() {
        return accountSelector;
    }
}
