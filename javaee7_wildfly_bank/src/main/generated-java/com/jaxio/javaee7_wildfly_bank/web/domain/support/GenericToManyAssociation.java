/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/domain/support/GenericToManyAssociation.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.domain.support;

import java.io.Serializable;
import java.util.List;

import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;

import com.jaxio.javaee7_wildfly_bank.web.permission.support.GenericPermission;
import com.jaxio.javaee7_wildfly_bank.web.util.MessageUtil;
import com.jaxio.jpa.querybyexample.GenericRepository;
import com.jaxio.jpa.querybyexample.Identifiable;

/**
 * Controller that allows you to manage an entity's x-to-many association.
 */
public abstract class GenericToManyAssociation<E extends Identifiable<PK>, PK extends Serializable> {
    protected String labelKey;
    protected MessageUtil messageUtil;
    protected GenericController<E, PK> controller;
    protected GenericPermission<E> permission;
    protected GenericRepository<E, PK> repository;
    protected SelectableListDataModel<E> dataModel;

    public GenericToManyAssociation(List<E> elements, String labelKey, GenericController<E, PK> controller) {
        this.dataModel = new SelectableListDataModel<E>(elements);
        this.labelKey = labelKey;
        this.controller = controller;
        this.messageUtil = controller.getMessageUtil();
        this.permission = controller.getPermission();
        this.repository = controller.getRepository();
    }

    /**
     * Return the dataModel used in the datatable component. 
     */
    public SelectableListDataModel<E> getModel() {
        return dataModel;
    }

    /**
     * Set the dataModel used in the datatable component. 
     */
    public void setModel(SelectableListDataModel<E> dataModel) {
        this.dataModel = dataModel;
    }

    /**
     * Remove the passed entity from the x-to-many association.
     */
    protected abstract void remove(E e);

    /**
     * Add the passed entity to the x-to-many association.
     */
    protected void add(E e) {
    }

    /**
     * Action to edit the entity corresponding to the selected row.
     * @return the implicit jsf view.
     */
    public String edit() {
        return controller.edit(dataModel.getSelectedRow());
    }

    /**
     * Action to view the entity corresponding to the selected row.
     * @return the implicit jsf view.
     */
    public String view() {
        return controller.view(dataModel.getSelectedRow());
    }

    /**
     * This datatable row selection listener invokes the {@link #view()} action and force the navigation to the returned implicit view.
     * Use it from a p:ajax event="rowSelect".
     */
    public void onRowSelectView(SelectEvent event) {
        Faces.navigate(view());
    }

    /**
     * This datatable row selection listener invokes the {@link #edit()} action and force the navigation to the returned implicit view.
     * Use it from a p:ajax event="rowSelect".
     */
    public void onRowSelectEdit(SelectEvent event) {
        Faces.navigate(edit());
    }

    /**
     * Remove the entity corresponding to the selected row from the x-to-many association.
     */
    public void remove() {
        checkPermission(permission.canDelete(dataModel.getSelectedRow()));
        remove(dataModel.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", dataModel.getSelectedRow());
    }

    /**
     * Action to create a new entity. 
     * @return the implicit jsf view.
     */
    public String add() {
        String extra = extraCreateIds();
        return extra != null ? controller.create() + extra : controller.create();
    }

    /**
     * Extra ids name/value pair param used to pre-fill the entity, in general this is the owner's id.
     * Example: <code>&ownerId=1234</code>.
     * Returns null if no extra id.
     */
    protected String extraCreateIds() {
        return null;
    }

    /**
     * For many to many, we use an auto-complete to select and add and element to the collection.
     */
    public void setAddElement(E selectedInAutoComplete) {
        if (selectedInAutoComplete != null) {
            remove(selectedInAutoComplete);
            add(selectedInAutoComplete);
            messageUtil.infoEntity("status_added_existing_ok", selectedInAutoComplete);
        }
    }

    /**
     * Always null as we use the setter only to add element.
     */
    public E getAddElement() {
        return null;
    }

    protected void checkPermission(boolean check) {
        if (!check) {
            throw new IllegalStateException();
        }
    }
}
