/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/filter/CookieLocaleResolver.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.filter;

import static com.google.common.collect.Iterables.find;
import static java.util.Arrays.asList;

import java.util.Locale;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.LocaleUtils;
import org.apache.deltaspike.core.api.exclude.Exclude;

import com.google.common.base.Predicate;

/**
 * inspired from org.springframework.web.servlet.i18n.CookieLocaleResolver
 */
@Exclude
public class CookieLocaleResolver implements LocaleResolver {

    private static final int DEFAULT_COOKIE_MAX_AGE = -1;
    private static final String DEFAULT_COOKIE_NAME = "locale";

    private String cookieName = DEFAULT_COOKIE_NAME;
    private int cookieMaxAge = DEFAULT_COOKIE_MAX_AGE;
    private Locale defaultLocale;

    @Override
    public Locale getLocale(HttpServletRequest request, HttpServletResponse response) {
        Locale locale = null;
        if (request != null) {
            Cookie cookie = getCookie(request, cookieName);
            if (cookie != null) {
                try {
                    locale = LocaleUtils.toLocale(cookie.getValue());
                } catch (IllegalArgumentException e) {
                    // invalid locale string retrieved from the cookie, reset cookie value
                    locale = defaultLocale;
                    setLocale(request, response, defaultLocale);
                }
            }
        }

        if (locale == null) {
            locale = defaultLocale;
        }
        return locale;
    }

    @Override
    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {
        if (locale != null) {
            Cookie cookie = new Cookie(cookieName, locale.toString());
            cookie.setMaxAge(cookieMaxAge);
            //cookie.setPath("/");
            response.addCookie(cookie);
        }
    }

    private Cookie getCookie(HttpServletRequest request, String name) {
        if (request.getCookies() == null) {
            return null;
        }

        return find(asList(request.getCookies()), getCookieNamePredicate(name), null);
    }

    private Predicate<Cookie> getCookieNamePredicate(final String cookieName) {
        return new Predicate<Cookie>() {
            @Override
            public boolean apply(Cookie cookie) {
                return cookieName.equals(cookie.getName());
            }
        };
    }

    public String getCookieName() {
        return cookieName;
    }

    public void setCookieName(String cookieName) {
        this.cookieName = cookieName;
    }

    public int getCookieMaxAge() {
        return cookieMaxAge;
    }

    public void setCookieMaxAge(int cookieMaxAge) {
        this.cookieMaxAge = cookieMaxAge;
    }

    public Locale getDefaultLocale() {
        return defaultLocale;
    }

    public void setDefaultLocale(Locale defaultLocale) {
        this.defaultLocale = defaultLocale;
    }
}