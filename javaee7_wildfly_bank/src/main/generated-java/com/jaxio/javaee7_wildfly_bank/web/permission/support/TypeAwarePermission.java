/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/permission/support/TypeAwarePermission.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.permission.support;

import static com.google.common.collect.Maps.newHashMap;

import java.io.Serializable;
import java.util.Map;

import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.inject.Named;

import com.jaxio.jpa.querybyexample.Identifiable;

/**
 * Permission service that should be used only in certain cases (e.g. from facelet tags). 
 * 
 * @see GenericPermission
 */
@Named("permission")
@SuppressWarnings("rawtypes")
public class TypeAwarePermission {
    private Map<String, GenericPermission<?>> permissions = newHashMap();

    @Inject
    void buildCache(Instance<GenericPermission<?>> registredPermissions) {
        for (GenericPermission<?> permission : registredPermissions) {
            permissions.put(permission.getTarget().getSimpleName(), permission);
        }
    }

    @SuppressWarnings("unchecked")
    private <E extends Identifiable<? extends Serializable>> GenericPermission<E> getPermission(E entity) {
        return (GenericPermission<E>) permissions.get(((Identifiable) entity).entityClassName());
    }

    // --------------------------------------------------------------
    // Permission shortcut methods that can be used from facelet tags
    // --------------------------------------------------------------

    public <E extends Identifiable<?>> boolean canView(E e) {
        return e == null ? false : getPermission(e).canView(e);
    }

    public <E extends Identifiable<?>> boolean canEdit(E e) {
        return e == null ? false : getPermission(e).canEdit(e);
    }

    public <E extends Identifiable<?>> boolean canDelete(E e) {
        return e == null ? false : getPermission(e).canDelete(e);
    }

    public <E extends Identifiable<?>> boolean canSearch(E e) {
        return e == null ? false : getPermission(e).canSearch(e);
    }

    public <E extends Identifiable<?>> boolean canSelect(E e) {
        return e == null ? false : getPermission(e).canSelect(e);
    }

    public <E extends Identifiable<?>> boolean canUse(E e) {
        return e == null ? false : getPermission(e).canUse(e);
    }
}