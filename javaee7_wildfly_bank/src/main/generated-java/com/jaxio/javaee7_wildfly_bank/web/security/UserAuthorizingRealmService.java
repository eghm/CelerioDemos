/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-javaee7-frontend:src/main/java/security/UserAuthorizingRealmService.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
 */
package com.jaxio.javaee7_wildfly_bank.web.security;

import static com.google.common.collect.Sets.newHashSet;

import java.util.Set;
import java.util.logging.Logger;

import javax.ejb.Singleton;
import javax.inject.Inject;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.subject.PrincipalCollection;

import com.jaxio.javaee7_wildfly_bank.context.UserWithId;
import com.jaxio.javaee7_wildfly_bank.domain.User;
import com.jaxio.javaee7_wildfly_bank.repository.UserRepository;

@Singleton
public class UserAuthorizingRealmService {

    private Logger log = Logger.getLogger(UserAuthorizingRealmService.class.getName());
    @Inject
    private UserRepository userRepository;

    public AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        UsernamePasswordToken upToken = (UsernamePasswordToken) token;
        String username = upToken.getUsername();
        User user = userRepository.getByUsername(username);

        if (user != null) {
            if (!user.getIsEnabled()) {
                log.info("User " + username + " is disabled");
                throw new DisabledAccountException("User [" + username + "] is disabled.");
            }

            UserWithId userWithId = new UserWithId(username, true, user.getId());
            return new SimpleAuthenticationInfo(userWithId, user.getPassword(), UserAuthorizingRealm.class.getCanonicalName());
        } else {
            log.info("User " + username + " not found");
            throw new UnknownAccountException("User " + username + " could not be found");
        }
    }

    public AuthorizationInfo getAuthorizationInfo(PrincipalCollection principals, Object availablePrincipal) {
        // null usernames are invalid
        if (principals == null) {
            throw new AuthorizationException("PrincipalCollection method argument cannot be null.");
        }

        UserWithId userWithId = (UserWithId) availablePrincipal;

        String username = userWithId.getUsername();
        User user = userRepository.getByUsername(username);
        if (user != null) {
            if (!user.getIsEnabled()) {
                log.info("User " + username + " is disabled");
                throw new DisabledAccountException("User [" + userWithId.getUsername() + "] is disabled.");
            }

            Set<String> roleNames = newHashSet(user.getRoleNames());
            return new SimpleAuthorizationInfo(roleNames);
        } else {
            log.info("User " + username + " not found");
            throw new UnknownAccountException("User " + username + " could not be found");
        }
    }
}