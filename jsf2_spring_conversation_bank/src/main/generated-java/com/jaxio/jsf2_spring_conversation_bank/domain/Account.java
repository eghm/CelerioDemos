/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package com.jaxio.jsf2_spring_conversation_bank.domain;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.jaxio.jpa.querybyexample.Identifiable;

/**
 * The Account represent a basic bank account
 */
@Entity
@Table(name = "ACCOUNT")
public class Account implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Account.class);

    // Raw attributes
    private Integer id;
    private String accountNumber;
    private String name;
    private Integer version;

    // Many to one
    private Currency currency;
    private Customer customer;

    // One to many
    private List<Transaction> transactions = new ArrayList<Transaction>();

    // -- [id] ------------------------

    @Override
    @Column(name = "ID", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Account id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [accountNumber] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "ACCOUNT_NUMBER", nullable = false, unique = true, length = 100)
    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public Account accountNumber(String accountNumber) {
        setAccountNumber(accountNumber);
        return this;
    }

    // -- [name] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "NAME", nullable = false, length = 100)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Account name(String name) {
        setName(name);
        return this;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Account version(Integer version) {
        setVersion(version);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Account.currency ==> Currency.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "CURRENCY_ID", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Currency getCurrency() {
        return currency;
    }

    /**
     * Set the {@link #currency} without adding this Account instance on the passed {@link #currency}
     */
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    public Account currency(Currency currency) {
        setCurrency(currency);
        return this;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Account.customer ==> Customer.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "CUSTOMER_ID", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Customer getCustomer() {
        return customer;
    }

    /**
     * Set the {@link #customer} without adding this Account instance on the passed {@link #customer}
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Customer}
     */
    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public Account customer(Customer customer) {
        setCustomer(customer);
        return this;
    }

    // -----------------------------------------------------------------
    // One to Many support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: account ==> transactions
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "account", orphanRemoval = true, cascade = ALL)
    public List<Transaction> getTransactions() {
        return transactions;
    }

    /**
     * Set the {@link Transaction} list.
     * It is recommended to use the helper method {@link #addTransaction(Transaction)} / {@link #removeTransaction(Transaction)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param transactions the list to set
     */
    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    /**
     * Helper method to add the passed {@link Transaction} to the {@link #transactions} list
     * and set this account on the passed transaction to preserve referential
     * integrity at the object level.
     *
     * @param transaction the to add
     * @return true if the transaction could be added to the transactions list, false otherwise
     */
    public boolean addTransaction(Transaction transaction) {
        if (getTransactions().add(transaction)) {
            transaction.setAccount(this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link Transaction} from the {@link #transactions} list and unset
     * this account from the passed transaction to preserve referential integrity at the object level.
     *
     * @param transaction the instance to remove
     * @return true if the transaction could be removed from the transactions list, false otherwise
     */
    public boolean removeTransaction(Transaction transaction) {
        if (getTransactions().remove(transaction)) {
            transaction.setAccount(null);
            return true;
        }
        return false;
    }

    /**
     * Apply the default values.
     */
    public Account withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Account && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getAccountNumber());

        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefully review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Account instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("accountNumber", getAccountNumber()) //
                .add("name", getName()) //
                .add("version", getVersion()) //
                .toString();
    }
}