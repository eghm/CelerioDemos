/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_bank.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.jaxio.jsf2_spring_conversation_bank.domain.Account;
import com.jaxio.jsf2_spring_conversation_bank.domain.Account_;
import com.jaxio.jsf2_spring_conversation_bank.domain.Currency;
import com.jaxio.jsf2_spring_conversation_bank.domain.Customer;
import com.jaxio.jsf2_spring_conversation_bank.domain.Transaction;
import com.jaxio.jsf2_spring_conversation_bank.repository.AccountRepository;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericEditForm;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericToManyAssociation;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericToOneAssociation;
import com.jaxio.jsf2_spring_conversation_bank.web.faces.ConversationContextScoped;
import com.jaxio.jsf2_spring_conversation_bank.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Account}.
 */
@Named
@ConversationContextScoped
public class AccountEditForm extends GenericEditForm<Account, Integer> {
    @Inject
    protected AccountController accountController;
    @Inject
    protected CurrencyController currencyController;
    protected GenericToOneAssociation<Currency, Integer> currency;
    @Inject
    protected CustomerController customerController;
    protected GenericToOneAssociation<Customer, Integer> customer;
    @Inject
    protected TransactionController transactionController;
    protected GenericToManyAssociation<Transaction, Integer> transactions;
    protected TabBean tabBean = new TabBean();

    @Inject
    public AccountEditForm(AccountRepository accountRepository, AccountGraphLoader accountGraphLoader) {
        super(accountRepository, accountGraphLoader);
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public Account getAccount() {
        return getEntity();
    }

    public String print() {
        return accountController.print(getAccount());
    }

    @PostConstruct
    void setupCurrencyActions() {
        currency = new GenericToOneAssociation<Currency, Integer>(currencyController, Account_.currency) {
            @Override
            protected Currency get() {
                return getAccount().getCurrency();
            }

            @Override
            protected void set(Currency currency) {
                getAccount().setCurrency(currency);
            }

            @NotNull
            @Override
            public Currency getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Currency, Integer> getCurrency() {
        return currency;
    }

    @PostConstruct
    void setupCustomerActions() {
        customer = new GenericToOneAssociation<Customer, Integer>(customerController, Account_.customer) {
            @Override
            protected Customer get() {
                return getAccount().getCustomer();
            }

            @Override
            protected void set(Customer customer) {
                getAccount().setCustomer(customer);
            }

            @NotNull
            @Override
            public Customer getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Customer, Integer> getCustomer() {
        return customer;
    }

    @PostConstruct
    void setupTransactionsActions() {
        transactions = new GenericToManyAssociation<Transaction, Integer>(getAccount().getTransactions(), transactionController, Account_.transactions) {
            @Override
            protected void remove(Transaction transaction) {
                getAccount().removeTransaction(transaction);
            }

            @Override
            protected void add(Transaction transaction) {
                getAccount().addTransaction(transaction);
            }

            @Override
            protected void onCreate(Transaction transaction) {
                transaction.setAccount(getAccount()); // for display
            }
        };
    }

    public GenericToManyAssociation<Transaction, Integer> getTransactions() {
        return transactions;
    }
}
