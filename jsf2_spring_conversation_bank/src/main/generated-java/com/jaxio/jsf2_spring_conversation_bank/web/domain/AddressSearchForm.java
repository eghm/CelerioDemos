/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_bank.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jpa.querybyexample.TermSelector;
import com.jaxio.jsf2_spring_conversation_bank.domain.Address;
import com.jaxio.jsf2_spring_conversation_bank.domain.Address_;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericSearchForm;
import com.jaxio.jsf2_spring_conversation_bank.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Address}.
 * It exposes a {@link Address} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class AddressSearchForm extends GenericSearchForm<Address, Integer, AddressSearchForm> {
    private static final long serialVersionUID = 1L;

    // full text search (applied first)
    protected TermSelector cityTermSelector = new TermSelector(Address_.city);
    protected TermSelector countryTermSelector = new TermSelector(Address_.country);

    // classic search
    protected Address address = new Address();
    protected PropertySelector<Address, String> streetSelector = newPropertySelector(Address_.street);
    protected PropertySelector<Address, String> zipCodeSelector = newPropertySelector(Address_.zipCode);
    protected PropertySelector<Address, String> citySelector = newPropertySelector(Address_.city);
    protected PropertySelector<Address, String> countrySelector = newPropertySelector(Address_.country);

    public Address getAddress() {
        return address;
    }

    @Override
    protected Address getEntity() {
        return getAddress();
    }

    @Override
    public AddressSearchForm newInstance() {
        return new AddressSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.term(termsOnAll, cityTermSelector, countryTermSelector);
        sp.property(streetSelector, zipCodeSelector, citySelector, countrySelector);
        return sp;
    }

    @Override
    public void resetWithOther(AddressSearchForm other) {
        this.address = other.getAddress();
        this.termsOnAll = other.getTermsOnAll();
        this.cityTermSelector = other.getCityTermSelector();
        this.countryTermSelector = other.getCountryTermSelector();
        this.streetSelector = other.getStreetSelector();
        this.zipCodeSelector = other.getZipCodeSelector();
        this.citySelector = other.getCitySelector();
        this.countrySelector = other.getCountrySelector();
    }

    // Term selectors    
    public TermSelector getCityTermSelector() {
        return cityTermSelector;
    }

    public TermSelector getCountryTermSelector() {
        return countryTermSelector;
    }

    // Property selectors
    public PropertySelector<Address, String> getStreetSelector() {
        return streetSelector;
    }

    public PropertySelector<Address, String> getZipCodeSelector() {
        return zipCodeSelector;
    }

    public PropertySelector<Address, String> getCitySelector() {
        return citySelector;
    }

    public PropertySelector<Address, String> getCountrySelector() {
        return countrySelector;
    }
}
