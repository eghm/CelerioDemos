/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_bank.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.jaxio.jsf2_spring_conversation_bank.domain.Account;
import com.jaxio.jsf2_spring_conversation_bank.domain.Currency;
import com.jaxio.jsf2_spring_conversation_bank.domain.Transaction;
import com.jaxio.jsf2_spring_conversation_bank.domain.Transaction_;
import com.jaxio.jsf2_spring_conversation_bank.repository.TransactionRepository;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericEditForm;
import com.jaxio.jsf2_spring_conversation_bank.web.domain.support.GenericToOneAssociation;
import com.jaxio.jsf2_spring_conversation_bank.web.faces.ConversationContextScoped;

/**
 * View Helper/Controller to edit {@link Transaction}.
 */
@Named
@ConversationContextScoped
public class TransactionEditForm extends GenericEditForm<Transaction, Integer> {
    @Inject
    protected TransactionController transactionController;
    @Inject
    protected CurrencyController currencyController;
    protected GenericToOneAssociation<Currency, Integer> currency;
    @Inject
    protected AccountController accountController;
    protected GenericToOneAssociation<Account, Integer> account;

    @Inject
    public TransactionEditForm(TransactionRepository transactionRepository, TransactionGraphLoader transactionGraphLoader) {
        super(transactionRepository, transactionGraphLoader);
    }

    /**
     * The entity to edit/view.
     */
    public Transaction getTransaction() {
        return getEntity();
    }

    public String print() {
        return transactionController.print(getTransaction());
    }

    @PostConstruct
    void setupCurrencyActions() {
        currency = new GenericToOneAssociation<Currency, Integer>(currencyController, Transaction_.currency) {
            @Override
            protected Currency get() {
                return getTransaction().getCurrency();
            }

            @Override
            protected void set(Currency currency) {
                getTransaction().setCurrency(currency);
            }

            @NotNull
            @Override
            public Currency getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Currency, Integer> getCurrency() {
        return currency;
    }

    @PostConstruct
    void setupAccountActions() {
        account = new GenericToOneAssociation<Account, Integer>(accountController, Transaction_.account) {
            @Override
            protected Account get() {
                return getTransaction().getAccount();
            }

            @Override
            protected void set(Account account) {
                getTransaction().setAccount(account);
            }

            @NotNull
            @Override
            public Account getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Account, Integer> getAccount() {
        return account;
    }
}
