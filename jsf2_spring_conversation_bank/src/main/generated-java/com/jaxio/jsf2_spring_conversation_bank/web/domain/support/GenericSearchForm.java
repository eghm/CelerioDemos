/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericSearchForm.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_bank.web.domain.support;

import static com.google.common.base.Throwables.propagate;
import static org.apache.commons.io.IOUtils.closeQuietly;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import com.jaxio.jpa.querybyexample.Identifiable;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jpa.querybyexample.TermSelector;
import com.jaxio.jsf2_spring_conversation_bank.domain.SavedSearch;
import com.jaxio.jsf2_spring_conversation_bank.web.conversation.Conversation;
import com.jaxio.jsf2_spring_conversation_bank.web.conversation.ConversationContext;
import com.jaxio.jsf2_spring_conversation_bank.web.conversation.ConversationManager;
import com.jaxio.jsf2_spring_conversation_bank.web.util.MessageUtil;

/**
 * Base Search Form for JPA entities.
 */
public abstract class GenericSearchForm<E extends Identifiable<PK>, PK extends Serializable, F extends GenericSearchForm<E, PK, F>> extends CommonAction<E>
        implements Serializable {
    private static final long serialVersionUID = 1L;

    @Inject
    private transient ConversationManager conversationManager;
    @Inject
    private transient MessageUtil messageUtil;

    @SuppressWarnings("unchecked")
    @PostConstruct
    public void init() {
        Conversation currentConversation = conversationManager.getCurrentConversation();
        if (currentConversation == null) {
            return;
        }

        ConversationContext<?> currentContext = currentConversation.getCurrentContext();
        if (currentContext != null && currentContext.getBean(getPrefilledFormName(), getClass()) != null) {
            resetWithOther((F) currentContext.getBean(getPrefilledFormName(), getClass()));
        }
    }

    public String getPrefilledFormName() {
        return "_" + this.getClass().getName() + "_prefilled_";
    }

    /**
     * Return the entity example used in this search form.
     */
    protected abstract E getEntity();

    /**
     * Always null as we use the setter only to add element.
     */
    public SavedSearch getCurrentSavedSearch() {
        return null;
    }

    public void setCurrentSavedSearch(SavedSearch savedSearch) {
        if (savedSearch != null) {
            messageUtil.info("saved_search_loaded", savedSearch.getName());
            resetWithOther(fromByteArray(savedSearch.getFormContent()));
        }
    }

    protected String searchFormName;

    public String getSearchFormName() {
        return searchFormName;
    }

    public void setSearchFormName(String searchFormName) {
        this.searchFormName = searchFormName;
    }

    private boolean privateSearch;

    public boolean isPrivateSearch() {
        return privateSearch;
    }

    public void setPrivateSearch(boolean privateSearch) {
        this.privateSearch = privateSearch;
    }

    protected TermSelector termsOnAll = new TermSelector();

    public TermSelector getTermsOnAll() {
        return termsOnAll;
    }

    /**
     * Convert all the search inputs into a new @{link SearchParameters}. 
     */
    public abstract SearchParameters toSearchParameters();

    /**
     * default search parameters
     */
    public SearchParameters searchParameters() {
        return new SearchParameters() //
                .limitBroadSearch() //
                .distinct() //
                .anywhere() //
                .caseInsensitive();
    }

    // Reset related

    public abstract F newInstance();

    public abstract void resetWithOther(F other);

    public void reset() {
        messageUtil.info("search_reseted");
        setSearchFormName(null);
        resetWithOther(newInstance());
    }

    protected byte[] toByteArray() {
        ObjectOutputStream oos = null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            oos = new ObjectOutputStream(baos);
            oos.writeObject(this);
            oos.flush();
            return baos.toByteArray();
        } catch (Exception e) {
            throw propagate(e);
        } finally {
            closeQuietly(oos);
            closeQuietly(baos);
        }
    }

    @SuppressWarnings("unchecked")
    protected F fromByteArray(byte[] bytes) {
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
            return (F) ois.readObject();
        } catch (Exception e) {
            throw propagate(e);
        } finally {
            closeQuietly(ois);
        }
    }
}
