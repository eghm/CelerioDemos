<!--
 ! Source code generated by Celerio, a Jaxio product.
 ! Documentation: http://www.jaxio.com/documentation/celerio/
 ! Follow us on twitter: @jaxiosoft
 ! Need commercial support ? Contact us: info@jaxio.com
 ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
 ! Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:p="http://primefaces.org/ui"
	xmlns:app="http://jaxio.com/app"
	xmlns:appcc="http://xmlns.jcp.org/jsf/composite/components">
<app:edit bean="#{customerEditForm}" title="#{customerEditForm.title}">
	<ui:define name="form">
		<app:input id="companyName" value="#{customerEditForm.customer.companyName}" size="100" label="customer_companyName" required="true" />
		<app:autoComplete id="address" value="#{customerEditForm.address.selected}" label="customer_address" title="customer_address" required="false" 
			model="#{customerEditForm.address}" controller="#{addressController}" permission="#{addressPermission}">
			<app:iconSearch id="selectAddress" />
			<app:iconAdd id="addAddress" />
			<app:iconEdit item="#{customerEditForm.customer.address}" />
			<app:iconView item="#{customerEditForm.customer.address}" />
		</app:autoComplete>
		<app:inputFile id="contractBinary" label="customer_contractBinary" object="#{customerEditForm.customer}"
			fileupload="#{customerController.getCustomerFileUpload(customerEditForm.customer)}" stream="#{customerFileDownload.getContractBinaryStream(customerEditForm.customer)}" 
			action="onContractBinaryFileUpload" filename="contractFileName" />
	</ui:define>
	<ui:define name="tabs">
			<p:tab id="accounts" title="#{msg.customer_accounts}" rendered="#{accountPermission.canUse() and not (print and customerEditForm.customer.accounts.isEmpty())}">
				<p:dataTable id="accountsList" var="item" value="#{customerEditForm.accounts.model}"
					paginator="#{not print and customerEditForm.customer.accounts.size() gt 10}" rows="#{print ? null : 10}"
					rowsPerPageTemplate="10,25,50,100" paginatorPosition="bottom"
					selection="#{customerEditForm.accounts.model.selectedRow}" selectionMode="single" emptyMessage="#{msg.collection_empty}">
					<p:ajax event="rowSelect" listener="#{customerEditForm.accounts.onRowSelect}" />
					<p:column id="account_accountNumber" headerText="#{msg.account_accountNumber}" sortBy="#{item.accountNumber}" styleClass="accountNumber">
						#{item.accountNumber}
					</p:column>
					<p:column id="account_name" headerText="#{msg.account_name}" sortBy="#{item.name}" styleClass="name">
						#{item.name}
					</p:column>
					<p:column id="actions" styleClass="actions-column" resizable="false">
						<f:facet name="header">
							<app:iconAdd id="addAccount" model="#{customerEditForm.accounts}" title="customer_accounts" permission="#{accountPermission}"/>
						</f:facet>
						<app:iconView model="#{customerEditForm.accounts}" item="#{item}" permission="#{accountPermission}">
							<f:setPropertyActionListener value="#{item}" target="#{customerEditForm.accounts.model.selectedRow}" />
						</app:iconView>
						<app:iconEdit model="#{customerEditForm.accounts}" item="#{item}" permission="#{accountPermission}">
							<f:setPropertyActionListener value="#{item}" target="#{customerEditForm.accounts.model.selectedRow}" />
						</app:iconEdit>
						<app:iconRemove dialogWidgetVar="askForRemoveAccountDialog" item="#{item}" permission="#{accountPermission}">
							<f:setPropertyActionListener value="#{item}" target="#{customerEditForm.accounts.model.selectedRow}" />
						</app:iconRemove>
					</p:column>
				</p:dataTable>
			</p:tab>
	</ui:define>
	<ui:define name="custom-dialogs">
		<app:confirmToManyRemoveDialog widgetVar="askForRemoveAccountDialog" toManyAction="#{customerEditForm.accounts}" update=":form:tabs:accountsList :form:messages" />
	</ui:define>
</app:edit>
</ui:composition>
