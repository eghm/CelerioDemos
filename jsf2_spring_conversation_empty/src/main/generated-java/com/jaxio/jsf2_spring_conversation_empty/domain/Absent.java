/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package com.jaxio.jsf2_spring_conversation_empty.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.jaxio.jpa.querybyexample.Identifiable;

@Entity
@Table(name = "absent")
public class Absent implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Absent.class);

    // Raw attributes
    private Integer id;
    private Date absdate;
    private String abstype;
    private String absnotes;
    private Boolean absdeleted;

    // Many to one
    private Employee emp;

    // -- [id] ------------------------

    @Override
    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "absid", precision = 10)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Absent id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [absdate] ------------------------

    @NotNull
    @Column(name = "absdate", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getAbsdate() {
        return absdate;
    }

    public void setAbsdate(Date absdate) {
        this.absdate = absdate;
    }

    public Absent absdate(Date absdate) {
        setAbsdate(absdate);
        return this;
    }

    // -- [abstype] ------------------------

    @NotEmpty
    @Size(max = 1)
    @Column(name = "abstype", nullable = false, length = 1)
    public String getAbstype() {
        return abstype;
    }

    public void setAbstype(String abstype) {
        this.abstype = abstype;
    }

    public Absent abstype(String abstype) {
        setAbstype(abstype);
        return this;
    }

    // -- [absnotes] ------------------------

    @Size(max = 2147483647)
    @Column(name = "absnotes", length = 2147483647)
    public String getAbsnotes() {
        return absnotes;
    }

    public void setAbsnotes(String absnotes) {
        this.absnotes = absnotes;
    }

    public Absent absnotes(String absnotes) {
        setAbsnotes(absnotes);
        return this;
    }

    // -- [absdeleted] ------------------------

    @NotNull
    @Column(name = "absdeleted", nullable = false, length = 1)
    public Boolean getAbsdeleted() {
        return absdeleted;
    }

    public void setAbsdeleted(Boolean absdeleted) {
        this.absdeleted = absdeleted;
    }

    public Absent absdeleted(Boolean absdeleted) {
        setAbsdeleted(absdeleted);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Absent.emp ==> Employee.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "empid", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Employee getEmp() {
        return emp;
    }

    /**
     * Set the {@link #emp} without adding this Absent instance on the passed {@link #emp}
     */
    public void setEmp(Employee emp) {
        this.emp = emp;
    }

    public Absent emp(Employee emp) {
        setEmp(emp);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Absent withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Absent && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Absent instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("absdate", getAbsdate()) //
                .add("abstype", getAbstype()) //
                .add("absnotes", getAbsnotes()) //
                .add("absdeleted", getAbsdeleted()) //
                .toString();
    }
}