/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_empty.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;
import static com.jaxio.jpa.querybyexample.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.Range;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jsf2_spring_conversation_empty.domain.Absent;
import com.jaxio.jsf2_spring_conversation_empty.domain.Absent_;
import com.jaxio.jsf2_spring_conversation_empty.domain.Employee;
import com.jaxio.jsf2_spring_conversation_empty.web.domain.support.GenericSearchForm;
import com.jaxio.jsf2_spring_conversation_empty.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Absent}.
 * It exposes a {@link Absent} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class AbsentSearchForm extends GenericSearchForm<Absent, Integer, AbsentSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Absent absent = new Absent();
    protected Range<Absent, Date> absdateRange = newRange(Absent_.absdate);
    protected PropertySelector<Absent, Integer> idSelector = newPropertySelector(Absent_.id);
    protected PropertySelector<Absent, String> abstypeSelector = newPropertySelector(Absent_.abstype);
    protected PropertySelector<Absent, String> absnotesSelector = newPropertySelector(Absent_.absnotes);
    protected PropertySelector<Absent, Boolean> absdeletedSelector = newPropertySelector(Absent_.absdeleted);
    protected PropertySelector<Absent, Employee> empSelector = newPropertySelector(Absent_.emp);

    public Absent getAbsent() {
        return absent;
    }

    @Override
    protected Absent getEntity() {
        return getAbsent();
    }

    @Override
    public AbsentSearchForm newInstance() {
        return new AbsentSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(absdateRange);
        sp.property(idSelector, abstypeSelector, absnotesSelector, absdeletedSelector);
        sp.property(empSelector);
        return sp;
    }

    @Override
    public void resetWithOther(AbsentSearchForm other) {
        this.absent = other.getAbsent();
        this.absdateRange = other.getAbsdateRange();
        this.idSelector = other.getIdSelector();
        this.abstypeSelector = other.getAbstypeSelector();
        this.absnotesSelector = other.getAbsnotesSelector();
        this.absdeletedSelector = other.getAbsdeletedSelector();
        this.empSelector = other.getEmpSelector();
    }

    // Ranges
    public Range<Absent, Date> getAbsdateRange() {
        return absdateRange;
    }

    // Property selectors
    public PropertySelector<Absent, Integer> getIdSelector() {
        return idSelector;
    }

    public PropertySelector<Absent, String> getAbstypeSelector() {
        return abstypeSelector;
    }

    public PropertySelector<Absent, String> getAbsnotesSelector() {
        return absnotesSelector;
    }

    public PropertySelector<Absent, Boolean> getAbsdeletedSelector() {
        return absdeletedSelector;
    }

    // Relation selectors
    public PropertySelector<Absent, Employee> getEmpSelector() {
        return empSelector;
    }
}
