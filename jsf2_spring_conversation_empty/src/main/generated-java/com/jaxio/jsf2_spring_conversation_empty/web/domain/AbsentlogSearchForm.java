/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_empty.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;
import static com.jaxio.jpa.querybyexample.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.Range;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jsf2_spring_conversation_empty.domain.Absent;
import com.jaxio.jsf2_spring_conversation_empty.domain.Absentlog;
import com.jaxio.jsf2_spring_conversation_empty.domain.Absentlog_;
import com.jaxio.jsf2_spring_conversation_empty.domain.Employee;
import com.jaxio.jsf2_spring_conversation_empty.web.domain.support.GenericSearchForm;
import com.jaxio.jsf2_spring_conversation_empty.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Absentlog}.
 * It exposes a {@link Absentlog} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class AbsentlogSearchForm extends GenericSearchForm<Absentlog, Integer, AbsentlogSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Absentlog absentlog = new Absentlog();
    protected Range<Absentlog, Date> logdateRange = newRange(Absentlog_.logdate);
    protected Range<Absentlog, Integer> logversionidRange = newRange(Absentlog_.logversionid);
    protected PropertySelector<Absentlog, Integer> idSelector = newPropertySelector(Absentlog_.id);
    protected PropertySelector<Absentlog, Integer> logversionidSelector = newPropertySelector(Absentlog_.logversionid);
    protected PropertySelector<Absentlog, String> lognotesSelector = newPropertySelector(Absentlog_.lognotes);
    protected PropertySelector<Absentlog, Employee> employeeSelector = newPropertySelector(Absentlog_.employee);
    protected PropertySelector<Absentlog, Absent> absSelector = newPropertySelector(Absentlog_.abs);

    public Absentlog getAbsentlog() {
        return absentlog;
    }

    @Override
    protected Absentlog getEntity() {
        return getAbsentlog();
    }

    @Override
    public AbsentlogSearchForm newInstance() {
        return new AbsentlogSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(logdateRange, logversionidRange);
        sp.property(idSelector, logversionidSelector, lognotesSelector);
        sp.property(employeeSelector, absSelector);
        return sp;
    }

    @Override
    public void resetWithOther(AbsentlogSearchForm other) {
        this.absentlog = other.getAbsentlog();
        this.logdateRange = other.getLogdateRange();
        this.logversionidRange = other.getLogversionidRange();
        this.idSelector = other.getIdSelector();
        this.logversionidSelector = other.getLogversionidSelector();
        this.lognotesSelector = other.getLognotesSelector();
        this.employeeSelector = other.getEmployeeSelector();
        this.absSelector = other.getAbsSelector();
    }

    // Ranges
    public Range<Absentlog, Date> getLogdateRange() {
        return logdateRange;
    }

    public Range<Absentlog, Integer> getLogversionidRange() {
        return logversionidRange;
    }

    // Property selectors
    public PropertySelector<Absentlog, Integer> getIdSelector() {
        return idSelector;
    }

    public PropertySelector<Absentlog, Integer> getLogversionidSelector() {
        return logversionidSelector;
    }

    public PropertySelector<Absentlog, String> getLognotesSelector() {
        return lognotesSelector;
    }

    // Relation selectors
    public PropertySelector<Absentlog, Employee> getEmployeeSelector() {
        return employeeSelector;
    }

    public PropertySelector<Absentlog, Absent> getAbsSelector() {
        return absSelector;
    }
}
