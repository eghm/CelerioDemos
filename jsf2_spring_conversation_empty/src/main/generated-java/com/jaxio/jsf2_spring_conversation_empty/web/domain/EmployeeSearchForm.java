/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.jaxio.jsf2_spring_conversation_empty.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jsf2_spring_conversation_empty.domain.Employee;
import com.jaxio.jsf2_spring_conversation_empty.domain.Employee_;
import com.jaxio.jsf2_spring_conversation_empty.web.domain.support.GenericSearchForm;
import com.jaxio.jsf2_spring_conversation_empty.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Employee}.
 * It exposes a {@link Employee} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class EmployeeSearchForm extends GenericSearchForm<Employee, Integer, EmployeeSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Employee employee = new Employee();
    protected PropertySelector<Employee, Integer> idSelector = newPropertySelector(Employee_.id);
    protected PropertySelector<Employee, String> empuhnumberSelector = newPropertySelector(Employee_.empuhnumber);
    protected PropertySelector<Employee, String> empfirstnameSelector = newPropertySelector(Employee_.empfirstname);
    protected PropertySelector<Employee, String> emplastnameSelector = newPropertySelector(Employee_.emplastname);
    protected PropertySelector<Employee, String> emproleSelector = newPropertySelector(Employee_.emprole);
    protected PropertySelector<Employee, String> empdivisionSelector = newPropertySelector(Employee_.empdivision);
    protected PropertySelector<Employee, String> empstatusSelector = newPropertySelector(Employee_.empstatus);

    public Employee getEmployee() {
        return employee;
    }

    @Override
    protected Employee getEntity() {
        return getEmployee();
    }

    @Override
    public EmployeeSearchForm newInstance() {
        return new EmployeeSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.property(idSelector, empuhnumberSelector, empfirstnameSelector, emplastnameSelector, emproleSelector, empdivisionSelector, empstatusSelector);
        return sp;
    }

    @Override
    public void resetWithOther(EmployeeSearchForm other) {
        this.employee = other.getEmployee();
        this.idSelector = other.getIdSelector();
        this.empuhnumberSelector = other.getEmpuhnumberSelector();
        this.empfirstnameSelector = other.getEmpfirstnameSelector();
        this.emplastnameSelector = other.getEmplastnameSelector();
        this.emproleSelector = other.getEmproleSelector();
        this.empdivisionSelector = other.getEmpdivisionSelector();
        this.empstatusSelector = other.getEmpstatusSelector();
    }

    // Property selectors
    public PropertySelector<Employee, Integer> getIdSelector() {
        return idSelector;
    }

    public PropertySelector<Employee, String> getEmpuhnumberSelector() {
        return empuhnumberSelector;
    }

    public PropertySelector<Employee, String> getEmpfirstnameSelector() {
        return empfirstnameSelector;
    }

    public PropertySelector<Employee, String> getEmplastnameSelector() {
        return emplastnameSelector;
    }

    public PropertySelector<Employee, String> getEmproleSelector() {
        return emproleSelector;
    }

    public PropertySelector<Employee, String> getEmpdivisionSelector() {
        return empdivisionSelector;
    }

    public PropertySelector<Employee, String> getEmpstatusSelector() {
        return empstatusSelector;
    }
}
