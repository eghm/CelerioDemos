/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package com.jaxio.jsf2_spring_conversation_empty.domain;

import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.util.*;

import org.junit.Test;

import com.jaxio.jsf2_spring_conversation_empty.util.ValueGenerator;

/**
 * Basic tests for Absent
 */
@SuppressWarnings("unused")
public class AbsentTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Absent model = new Absent();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        Absent model = new Absent();
        model.setId(ValueGenerator.getUniqueInteger());
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  Absent.emp ==> Employee.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setEmp() {
        Absent many = new Absent();

        // init
        Employee one = new Employee();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setEmp(one);

        // make sure it is propagated properly
        assertThat(many.getEmp()).isEqualTo(one);

        // now set it to back to null
        many.setEmp(null);

        // make sure null is propagated properly
        assertThat(many.getEmp()).isNull();
    }

    /*
     public void equalsUsingPk() {
     Absent model1 = new Absent();
     Absent model2 = new Absent();

     Integer id = ValueGenerator.getUniqueInteger();
     model1.setId(id);
     model2.setId(id);

     model1.setAbsdate(new Date());
     model2.setAbsdate(new Date());

     model1.setAbstype("a");
     model2.setAbstype("a");

     model1.setAbsnotes("a");
     model2.setAbsnotes("a");

     model1.setAbsdeleted(true);
     model2.setAbsdeleted(true);
     assertThat(model1.isIdSet()).isTrue();
     assertThat(model2.isIdSet()).isTrue();
     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
     assertThat(model1).isEqualTo(model2);
     assertThat(model2).isEqualTo(model1);
     }
     */
}