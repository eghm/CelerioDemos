/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package com.jaxio.jsf2_spring_conversation_empty.domain;

import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.util.*;

import org.junit.Test;

import com.jaxio.jsf2_spring_conversation_empty.util.ValueGenerator;

/**
 * Basic tests for Absentlog
 */
@SuppressWarnings("unused")
public class AbsentlogTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Absentlog model = new Absentlog();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        Absentlog model = new Absentlog();
        model.setId(ValueGenerator.getUniqueInteger());
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  Absentlog.employee ==> Employee.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setEmployee() {
        Absentlog many = new Absentlog();

        // init
        Employee one = new Employee();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setEmployee(one);

        // make sure it is propagated properly
        assertThat(many.getEmployee()).isEqualTo(one);

        // now set it to back to null
        many.setEmployee(null);

        // make sure null is propagated properly
        assertThat(many.getEmployee()).isNull();
    }

    @Test
    public void manyToOne_setAbs() {
        Absentlog many = new Absentlog();

        // init
        Absent one = new Absent();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setAbs(one);

        // make sure it is propagated properly
        assertThat(many.getAbs()).isEqualTo(one);

        // now set it to back to null
        many.setAbs(null);

        // make sure null is propagated properly
        assertThat(many.getAbs()).isNull();
    }

    /*
     public void equalsUsingPk() {
     Absentlog model1 = new Absentlog();
     Absentlog model2 = new Absentlog();

     Integer id = ValueGenerator.getUniqueInteger();
     model1.setId(id);
     model2.setId(id);

     model1.setLogdate(new Date());
     model2.setLogdate(new Date());

     model1.setLogversionid(1);
     model2.setLogversionid(1);

     model1.setLognotes("a");
     model2.setLognotes("a");
     assertThat(model1.isIdSet()).isTrue();
     assertThat(model2.isIdSet()).isTrue();
     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
     assertThat(model1).isEqualTo(model2);
     assertThat(model2).isEqualTo(model1);
     }
     */
}